#
# THIS FILE IS AUTOMATICALLY GENERATED
# DO NOT EDIT
#
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: opensearchs.modules.elastisys.com
spec:
  group: modules.elastisys.com
  names:
    kind: OpenSearch
    plural: opensearchs
  versions:
    - name: v1alpha1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                clusterName:
                  type: string
                config:
                  type: object
                  additionalProperties:
                    type: string
                keystore:
                  type: array
                  items:
                    type: object
                    properties:
                      secretName:
                        type: string
                    requires:
                      - secretName
                opensearchJavaOpts:
                  type: string
                plugins:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    installList:
                      type: array
                      items:
                        type: string
                    requires:
                      - enabled
                      - installList
                replicas:
                  type: integer
                resources:
                  description: ResourceRequirements describes the compute resource requirements.
                  properties:
                    claims:
                      description: |-
                        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

                        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

                        This field is immutable. It can only be set for containers.
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                            type: string
                          request:
                            description: Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
                            type: string
                        required:
                          - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                        - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties:
                        description: |-
                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                          The serialization format is:

                          ``` <quantity>        ::= <signedNumber><suffix>

                          	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)

                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                          	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

                          <decimalSI>       ::= m | "" | k | M | G | T | P | E

                          	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:

                          - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.

                          The sign will be omitted unless the number is negative.

                          Examples:

                          - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                        type: string
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                    requests:
                      additionalProperties:
                        description: |-
                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                          The serialization format is:

                          ``` <quantity>        ::= <signedNumber><suffix>

                          	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)

                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                          	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

                          <decimalSI>       ::= m | "" | k | M | G | T | P | E

                          	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:

                          - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.

                          The sign will be omitted unless the number is negative.

                          Examples:

                          - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                        type: string
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                  type: object
                roles:
                  type: array
                  items:
                    type: string
